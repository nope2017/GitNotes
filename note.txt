	
	1.	git add filename	添加到暂存区
		git commit -m "some word"	传到版本库
		
	2.版本回退：
		1.HEAD 指向的版本就是当前版本，Git允许在版本的历史之间穿梭，
		使用命令 git reset --hard commit_id。
		
		2.穿梭前，用 git log 可以查看提交历史，以便确定要回退到哪个版本；
		如果嫌输出信息太多，看的眼花缭乱，可以加上 --pretty=oneline参数；
		
		3.要重返未来，用git reflog 查看命令历史，以便确定要回到未来的哪个版本.
		
	3.工作区和暂存区
		1.版本库（Repository） ==》工作区的隐藏目录 .git;
		2. 大概流程：
			工作区 ：add  ==>  暂存区index(stage) ==>commit    HEAD (master)
			
	4.管理修改
		1.Git跟踪并管理的是修改，而非文件;
		2.git diff HEAD -- filename ==> 查看工作区和版本库里最新版本的区别；
		3.每次修改，如果不 add 到暂存区，那就不会加入到commit中。
		
	5.撤销修改
		1.当乱改工作区中某个文件的内容，想直接丢弃工作区的修改时，用 git checkout -- filename;
		2.当将内容添加到暂存区时，丢弃修改分两步：1）用命令 git reset HEAD file ,回到1，按步骤1操作；
		3.如果提交修改到版本库，要撤销，参考版本回退。
		
	6.删除文件
		1.rm 删除本地文件
		2.git rm 删除版本库中一个文件;
	
	7.远程仓库
		1.创建SSH Key:
			ssh-keygen -t rsa -C "youremail@example.com";
		2.用户主目录下，.ssh目录， id_rsa是私钥，id_rsa.pub是公钥。
	8.关联远程库
		git remote add origin git@github.com:nope2017/GitNotes.git;
	关联后，第一次推送master分支内容
		git push -u origin master
		此后推送
			git push origin master
			
	9.从远程库克隆
		要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆；	
		git 支持多种协议，包括https,但通过ssh支持的原生git协议速度最快。
		
	10.分支管理
		git鼓励大量使用分支：
			查看分支： git branch
			创建分支： git branch <name>
			切换分支：	git checkout <name>
			创建+切换分支： git checkout -b <name>
			合并某分支到当前分支： git merge <name>
			删除分支：	git branch -d <name>
			
	11.HEAD 指向 master（或其他分支） , master 指向最新的提交

	12.解决冲突
		1.用git log --graph 命令可以看到分支合并图
		2.Git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容;
		3.查看不同分支合并情况,历史分支流程信息：
			git log --graph --pretty=oneline --abbrev-commit
		
	13.合并分支时，加上 --no-ff 参数就可以用普通模式合并，合并后的历史有分支，能看出来
		曾经做过合并，而 fast forward 合并就看不出来曾经做过合并。
		git merge --no-ff -m "something" branch
		
		分支管理： 1.master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活。
			干活都在分支上，即分支时不稳定的，都某个时候，再把分支合并到master上发布。
			
	14.Bug分支
		1.需要创建新分支处理bug时，而当前branch进行的工作未提交(已add，未commit)，可先隐藏：
			git stash; ==> stash功能可把当前工作现场“储藏”起来，等以后恢复现场后
			继续工作；
		2.切换到bug分支，要在那个分支上修复bug，就要在哪个分支上创建临时bug分支；
		3.修复bug分支后，切回要修复的分支，merge；
		4.然后回到工作分支接着干活，git stash list命令查看隐藏的工作现场；
		5.恢复现场：
			1）git stash apply恢复，但stash的内容并没有删除，需用git stash drop来删除；
			2）git stash pop，恢复的同时把stash内容也删了。
			
	15.Feature分支
		开发一个新feature，最好新建一个分支；
		强行删除：git branch -D <name>
		
	16.多人协作
		工作模式：
			1.首先，可以试图用git push origin branch-name推送自己的修改；
			2.如果推送失败，则因为远程分支比你的本地更新，需要先用git pull从远程抓取分支；
			3.如果合并有冲突，则解决冲突，并在本地提交；
			4.没有冲突或冲突解决后，再用git push origin branch-name推送。
			如果git pull 提示“no tracking information"，则说明本地分支和远程分支的链接
			关系没有创建，用命令：git branch --set-upstream branch-name origin/branch-name.
			
		查看远程库信息： git remote -v;
		本地新建的分支如果不推送到远程，对其他人就是不可见的；
		
	17.标签管理  发布一个版本时，通常先在版本库中打一个标签(tag),这样，就唯一确定了标签时刻的
		版本。git的标签就是指向某个commit的指针，不能移动。
			tag就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起。
			
	18.创建标签
		1.创建一个新标签： git tag <name>; 如：git tag v1.0;
		2.查看所有标签： git tag;
		3.默认标签打在最新提交的commit上的，要打在以前的commit上：
			1）找到历史提交的commit id：git log --pretty=oneline --abbrev-commit
			2)git tag <name> commit_id.
		4.标签不是按时间顺序列出而是按字母顺序。
			查看标签信息：git show <tagname>;
		5.创建带有说明的标签，用 -a 指定标签名，-m指定说明文字；
			git tag -a v0.1 -m "version 0.1 released" commit_id;
		6.通过-s 用私钥签名一个标签：
			git tag -s v2 -m "signed version 2 released" commit_id;
			签名采用PGP签名，需首先安装gpg(GnuPG)
			
	19.操作标签
		1.删除标签： git tag -d <tagname>;
		2.推送标签到远程： git push origin <tagname>
		3.一次性推送全部尚未推送到远程的本地标签：
			git push origin --tags
		4.删除已推送到远程的标签：
			1）删除本地标签；
			2）删除远程标签： git push origin :refs/tags/<tagname>;